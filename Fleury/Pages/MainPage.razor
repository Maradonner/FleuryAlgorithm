@using static Fleury.Components.Connector
@inject MouseService mouseSrv
@inject IBlazorContextMenuService blazorContextMenuService
@inject IJSRuntime jsRuntime

<div class="row mt-2">
    <div class="col">
        <svg @ref="mySvg" class="bg-light" width="1000" height="500" xmlns="http://www.w3.org/2000/svg"
             @oncontextmenu:preventDefault="true"
             @oncontextmenu=@(e => mouseSrv.FireContextMenu(this, e))
             @onmousemove=@(e => mouseSrv.FireMove(this, e))
             @onmouseup=@(e => mouseSrv.FireUp(this, e))
             @onmouseleave=@(e => mouseSrv.FireLeave(this, e))
             @onclick=@(e => mouseSrv.FireClick(this, e))>

            @foreach (var node in nodes)
            {
                @foreach (var connectedPlantId in node.ConnectedTo)
                {
                    var connectedPlant = nodes.FirstOrDefault(p => p.Id == connectedPlantId);
                    if (connectedPlant != null && node.Id < connectedPlant.Id)
                    {
                        <Connector X1=node.X Y1=node.Y Dir1=Direction.Top X2=connectedPlant.X Y2=connectedPlant.Y Dir2=Direction.Bottom />
                    }
                }


                <Draggable Id="@node.Id" @bind-X=node.X @bind-Y=node.Y OnDraggableContextMenu="HandleDraggableContextMenu">
                    <circle r="@node.R" fill="@node.Fill" stroke="#fff" />
                    <text text-anchor="middle" alignment-baseline="central" class="pe-none sun-title">@node.Id</text>
                </Draggable>
            }
        </svg>
    </div>
</div>

<style>
    text {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        fill: #333333;
    }

    .sun-title {
        fill: #fff;
        pointer-events: none !important;
    }

    .sun {
        fill: #ff6600;
        stroke: #fff;
        stroke-width: 1;
    }
</style>

@foreach (var node in nodes)
{
    <div class="row g-3 align-items-center">
        @foreach (var connect in node.ConnectedTo)
        {
            <div class="col-auto">

                <label class="col-form-label">From @node.Id to @connect</label>
            </div>

        }
    </div>
}


<ContextMenu Id="mainContextMenu" AutoHide="true">
    <Item OnClick="@AddNewNode">Add a new Node</Item>
</ContextMenu>

<ContextMenu Id="nodeContextMenu" AutoHide="true">
    <Item OnClick="@DeleteNode">Delete a node</Item>
    <Item>
        Connect a node
        <SubMenu>
            @foreach (var node in nodes)
            {
                <Item OnClick="@(() => ConnectNodes(node))">Connect to @node.Id</Item>
            }
        </SubMenu>
    </Item>
</ContextMenu>


@code {
    private List<Node> nodes = [];

    private ElementReference mySvg;
    private bool showMainContextMenu = true;
    private int? nodeIdSelectedByContextMenu;
    private Point LastRightClickPoint = null!;

    private void DeleteNode(ItemClickEventArgs e)
    {
        var node = nodes.First(p => p.Id == nodeIdSelectedByContextMenu);
        NodeService.DeleteNode(node);
        Console.WriteLine($"Here I would delete node with Id:{nodeIdSelectedByContextMenu}");
    }

    private void AddNewNode(ItemClickEventArgs e)
    {
        var maxNodeId = nodes.Any() ? nodes.Max(x => x.Id) : 0;
        var node = new Node
        {
            Id = maxNodeId + 1,
            X = LastRightClickPoint.X,
            Y = LastRightClickPoint.Y,
            R = 50,
            Fill = "#04dcd2"
        };

        NodeService.AddNode(node);
    }

    private void HandleDraggableContextMenu(int id)
    {
        Console.WriteLine($"Id is {id}");
        nodeIdSelectedByContextMenu = id;
        showMainContextMenu = false;
    }

    private void ConnectNodes(Node node)
    {
        var node1 = nodes.First(p => p.Id == nodeIdSelectedByContextMenu);
        var node2 = nodes.First(p => p.Id == node.Id);

        NodeService.ConnectNodes(node1, node2);
    }

    protected override void OnInitialized()
    {
        this.nodes = NodeService.GetAllNodes();
        mouseSrv.OnContextMenu += HandleSvgContextMenu;
        base.OnInitialized();
    }

    private async void HandleSvgContextMenu(object? sender, MouseEventArgs e)
    {
        var pointDto = await jsRuntime.InvokeAsync<PointDto>("getCoordFromSvg", mySvg, e.ClientX, e.ClientY);
        LastRightClickPoint = new Point((int)pointDto.X, (int)pointDto.Y);

        if (showMainContextMenu)
        {
            await blazorContextMenuService.ShowMenu("mainContextMenu", (int)e.ClientX, (int)e.ClientY);
        }
        else
        {
            await blazorContextMenuService.ShowMenu("nodeContextMenu", (int)e.ClientX, (int)e.ClientY);
        }
        showMainContextMenu = true;
    }
}
